{"version":3,"sources":["redux/contacts/contacts-actions.js","components/Modal/Modal.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["saveContact","createAction","name","number","payload","id","shortid","generate","removeContact","changeFilter","modalRoot","document","querySelector","Modal","handleKeyDown","e","code","props","onClose","handleBackdropClick","event","currentTarget","target","window","addEventListener","this","removeEventListener","createPortal","className","onClick","children","Component","ContactsForm","state","message","showModal","handleChange","value","setState","handleSubmit","preventDefault","checkedName","contacts","items","find","contact","onContact","closeModal","resetForm","onSubmit","type","placeholder","onChange","connect","dispatch","contactsActions","ContactListItem","onRemove","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","onRemoveContact","onToggleCompleted","map","key","handleFilter","App","contactsReducer","createReducer","length","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","storage","blacklist","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","getElementById"],"mappings":"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","file":"static/js/main.5310bdc9.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst saveContact = createAction('contacts/save', ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeContact = createAction('contacts/remove');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { saveContact, removeContact, changeFilter };\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport propTypes from 'prop-types';\nimport './modal.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      this.props.onClose();\n    }\n  };\n\n  handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal__content\">\n          <span>{this.props.children}</span>\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\nModal.propTypes = {\n  onClose: propTypes.func.isRequired,\n  children: propTypes.string.isRequired,\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport Modal from '../Modal';\n\nimport './ContactsForm.css';\n\nclass ContactsForm extends Component {\n  static propTypes = {\n    onContact: propTypes.func.isRequired,\n    contacts: propTypes.object.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    message: '',\n    showModal: false,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const checkedName = contacts.items.find(contact => name === contact.name);\n    const { onContact } = this.props;\n\n    if (!name || !number) {\n      this.closeModal();\n      return this.setState({ message: `Fill in all the fields` });\n    }\n    if (checkedName) {\n      this.closeModal();\n      return this.setState({ message: `${name} is already in contacts` });\n    }\n\n    onContact(this.state);\n    this.resetForm();\n  };\n\n  resetForm() {\n    this.setState({ name: '', number: '' });\n  }\n\n  closeModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { name, number, message, showModal } = this.state;\n\n    return (\n      <>\n        {message !== '' && showModal ? (\n          <Modal onClose={this.closeModal}>{message}</Modal>\n        ) : null}\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Name\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Enter name\"\n                value={name}\n                name=\"name\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Number\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Enter number\"\n                value={number}\n                name=\"number\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onContact: contact => dispatch(contactsActions.saveContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, onRemove }) => (\n  <li className=\"listContacts\">\n    <span className=\"list\">{name}</span>\n    <span className=\"list\"> {number}</span>\n    <button className=\"list\" type=\"button\" onClick={onRemove}>\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n  onRemove: propTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport ContactListItem from './ContactListItem';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport './Contact.css';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className=\"contextListContacts\">\n    <header className=\"listContacts\">\n      <span className=\"headerList\">name</span>\n      <span className=\"headerList\">telephone</span>\n      <span className=\"headerList\">action</span>\n    </header>\n\n    {contacts.map(({ id, name, number }) => (\n      <ContactListItem\n        key={id}\n        name={name}\n        number={number}\n        onRemove={() => onRemoveContact(id)}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: propTypes.oneOfType([\n    propTypes.arrayOf(\n      propTypes.exact({\n        id: propTypes.string.isRequired,\n        name: propTypes.string.isRequired,\n        number: propTypes.number.isRequired,\n      }),\n    ),\n    propTypes.array,\n  ]),\n  onRemoveContact: propTypes.func.isRequired,\n};\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsActions.removeContact(id)),\n  onToggleCompleted: () => null,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ value, handleFilter }) => (\n  <div>\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Enter name\"\n        value={value}\n        name=\"filter\"\n        onChange={handleFilter}\n      />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  value: propTypes.string.isRequired,\n  handleFilter: propTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleFilter: event =>\n    dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport ContactsForm from './ContactsForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\n\nimport '../../node_modules/modern-normalize/modern-normalize.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        <h2>Contact</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contacts-actions';\n\nconst initialState = {\n  items: [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  filter: '',\n};\n\nconst contactsReducer = createReducer(initialState, {\n  [contactsActions.saveContact]: (state, { payload }) => {\n    return {\n      ...state,\n      items: [...state.items, payload],\n    };\n  },\n\n  [contactsActions.removeContact]: (state, { payload }) => {\n    const items = state.items.filter(({ id }) => id !== payload);\n    return items.length === 1\n      ? {\n          items: items,\n          filter: '',\n        }\n      : {\n          items: items,\n          filter: state.filter,\n        };\n  },\n\n  [contactsActions.changeFilter]: (state, { payload }) => {\n    return {\n      ...state,\n      filter: payload,\n    };\n  },\n});\nexport default contactsReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reduser';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter', 'message'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}